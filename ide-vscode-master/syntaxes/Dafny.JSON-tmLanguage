{
  "fileTypes": [
    "dfy"
  ],
  "foldingStartMarker": "(\\{\\s*(//.*)?$|^\\s*// \\{\\{\\{)",
  "foldingStopMarker": "^\\s*(\\}|// \\}\\}\\}$)",
  "name": "Dafny",
  "patterns": [
    {
      "begin": "(class)\\s*(\\w+)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.dafny"
        },
        "2": {
          "name": "entity.name.function.dafny"
        }
      },
      "end": "\\{",
      "name": "meta.class.identifier.dafny"
    },
    {
      "match": "\\b(class|trait|datatype|codatatype|type|newtype|function|ghost|nameonly|var|const|method|constructor|abstract|module|import|export|lemma|as|is|opened|static|twostate|refines|witness|extends|returns|break|then|else|if|label|return|while|for|to|downto|print|new|in|fresh|allocated|match|case|assert|by|assume|expect|reveal|modify|predicate|least|greatest|forall|exists|false|true|null|old|unchanged|calc|iterator|yields|yield)\\b",
      "name": "keyword.control.dafny"
    },
    {
      "begin": "(\\w+)\\s*\\(",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.dafny"
        }
      },
      "end": "\\)",
      "name": "meta.method.identifier.dafny",
      "patterns": [
        {
          "include": "#parameters"
        }
      ]
    },
    {
      "include": "#code"
    }
  ],
  "repository": {
    "code": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#comments-inline"
        },
        {
          "include": "#keywords"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.dafny"
            }
          },
          "match": "/\\*\\*/",
          "name": "comment.block.empty.dafny"
        },
        {
          "include": "#comments-inline"
        }
      ]
    },
    "comments-inline": {
      "patterns": [
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.dafny"
            }
          },
          "end": "\\*/",
          "name": "comment.block.dafny"
        },
        {
          "captures": {
            "1": {
              "name": "comment.line.double-slash.dafny"
            },
            "2": {
              "name": "punctuation.definition.comment.dafny"
            }
          },
          "match": "\\s*((//).*$\\n?)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(class|trait|datatype|codatatype|type|newtype|function|include|ghost|nameonly|var|const|method|constructor|abstract|module|import|export|lemma|as|is|opened|static|twostate|refines|witness|extends|returns|break|then|else|if|label|return|while|for|to|downto|print|new|in|fresh|allocated|match|case|assert|by|assume|expect|reveal|modify|predicate|least|greatest|forall|exists|false|true|null|old|unchanged|calc|iterator|yields|yield)\\b",
          "name": "keyword.control.dafny"
        },
        {
          "match": "\\b(function)\\b",
          "name": "entity.name.function"
        },
        {
          "match": ";",
          "name": "punctuation.terminator.dafny"
        },
        {
          "match": "\\b(requires|ensures|modifies|reads|invariant|decreases|reveals|provides)\\b",
          "name": "keyword.control.verify.dafny"
        },
        {
          "match": "\\b(bool|char|real|multiset|map|imap|nat|int|ORDINAL|object|string|set|iset|seq|array|array[1-9]\\d*|bv0|bv[1-9]\\d*)\\b",
          "name": "keyword.type.dafny"
        },
        {
          "match": "this",
          "name": "storage.type.dafny"
        },
        {
          "match": "\\|:",
          "name": "keyword.control.dafny"
        },
        {
          "match": "(==|!=|<=|>=|<|>)",
          "name": "keyword.operator.comparison.dafny"
        },
        {
          "match": "(:=)",
          "name": "keyword.operator.assignment.dafny"
        },
        {
          "match": "(\\-|\\+|\\*|\\/|%)",
          "name": "keyword.operator.arithmetic.dafny"
        },
        {
          "match": "(!|&&|\\|\\||<==>|==>|<==)",
          "name": "keyword.operator.logical.dafny"
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "begin": ":\\s*(\\w+)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.dafny"
            }
          },
          "end": "\\s*|,|\\)|\\}|requires|ensures|modifies",
          "name": "meta.type.identifier.dafny"
        },
        {
          "include": "#generics"
        }
      ]
    },
    "generics": {
      "patterns": [
        {
          "begin": "<(\\w+)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.dafny"
            }
          },
          "end": ">",
          "name": "meta.type.identifier.dafny"
        }
      ]
    }
  },
  "scopeName": "text.dfy.dafny",
  "uuid": "f4eb6552-5503-47cf-9d18-6388d0981235"
}